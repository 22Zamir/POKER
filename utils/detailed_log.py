import os
from datetime import datetime
from typing import List
from poker.cards import Card


class PokerLogger:
    def __init__(self, log_file="poker_game.log"):
        self.log_file = log_file
        self.last_action = None    # 'bluff_raise', 'raise', 'fold' –∏ —Ç.–¥.
        self.last_player = None    # –∫—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–¥–µ–ª–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ
        self._clear_log()

    def log_bluff_raise(self, player_name: str, amount: int, pot: int):
        self._write(f"  {player_name} ‚Üí üé≠ BLUFF RAISE {amount}! (–±–∞–Ω–∫: {pot})")
        self.last_action = 'bluff_raise'
        self.last_player = player_name

    def log_call(self, player_name: str, amount: int, pot: int):
        self._write(f"  {player_name} ‚Üí CALL {amount} (–±–∞–Ω–∫: {pot})")
        self.last_action = 'call'
        self.last_player = player_name

    def log_fold(self, player_name: str, pot: int):
        self._write(f"  {player_name} ‚Üí FOLD (–±–∞–Ω–∫: {pot})")
        self.last_action = 'fold'
        self.last_player = player_name

    def _clear_log(self):
        """–û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π"""
        with open(self.log_file, "w", encoding="utf-8") as f:
            f.write(f"--- –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ---\n\n")

    def log_hand_start(self, hand_num: int):
        self._write(f"\n--- –†–∞–∑–¥–∞—á–∞ {hand_num} ---")

    def log_preflop(self, players: List):
        self._write("[Preflop] –ö–∞—Ä—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã:")
        for p in players:
            if p.in_game:
                hand_str = " ".join(c.pretty() for c in p.hand)
                self._write(f"  {p.name}: {hand_str} (—Å—Ç–µ–∫: {p.stack})")

    def log_board(self, stage: str, board: List[Card]):
        board_str = " ".join(c.pretty() for c in board)
        self._write(f"[{stage}] –ë–æ—Ä–¥: {board_str}")

    def log_action(self, player_name: str, action: str, pot: int):
        self._write(f"  {player_name} ‚Üí {action.upper()} (–±–∞–Ω–∫: {pot})")

   # def log_fold(self, player_name: str, pot: int):
    #    self._write(f"  {player_name} ‚Üí FOLD (–±–∞–Ω–∫: {pot})")

    #def log_call(self, player_name: str, amount: int, pot: int):
    #    self._write(f"  {player_name} ‚Üí CALL {amount} (–±–∞–Ω–∫: {pot})")

    def log_raise(self, player_name: str, amount: int, pot: int, raise_type: str = "RAISE"):
        self._write(f"  {player_name} ‚Üí {raise_type} {amount}! (–±–∞–Ω–∫: {pot})")

    def log_allin(self, player_name: str, amount: int, pot: int):
        self._write(f"  {player_name} ‚Üí ALL-IN {amount}! (–±–∞–Ω–∫: {pot})")

    def log_showdown(self, winners: List[str], pot: int, best_rank: tuple):
        if winners:
            self._write(f"üèÜ –®–æ—É–¥–∞—É–Ω: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å(–∏): {', '.join(winners)} ‚Üí +{pot // len(winners)}")
        else:
            self._write(f"üèÜ –®–æ—É–¥–∞—É–Ω: –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–±–∞–Ω–∫: {pot})")

    def log_all_folded(self, winner: str, pot: int):
        self._write(f"üéâ –í—Å–µ —Å–±—Ä–æ—Å–∏–ª–∏! {winner} –∑–∞–±–∏—Ä–∞–µ—Ç {pot}")

    def log_stacks(self, players: List):
        stacks = " | ".join(f"{p.name}: {p.stack}" for p in players)
        self._write(f"üìä –°—Ç–µ–∫–∏: {stacks}")

    def _write(self, text: str):
        print(text)  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(text + "\n")

    def log_bluff_raise(self, player_name: str, amount: int, pot: int):
        self._write(f"  {player_name} ‚Üí üé≠ BLUFF RAISE {amount}! (–±–∞–Ω–∫: {pot})")
