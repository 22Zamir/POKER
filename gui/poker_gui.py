import os
import tkinter as tk
from poker.simulator import PokerSimulator, Player
from ai.basic_strategy import simple_strategy, monte_carlo_strategy


class PokerGUI(tk.Tk):
    def __init__(self, simulator):
        super().__init__()
        self.simulator = simulator
        self.title("Poker Simulator")

        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–∞—Ä—Ç–∞–º–∏
        self.cards_dir = os.path.join(os.path.dirname(__file__), "..", "templates", "cards")
        if not os.path.exists(self.cards_dir):
            print(f"‚ö† –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.cards_dir}")

        # –ú–µ—Ç–∫–∞ –¥–ª—è –±–æ—Ä–¥–∞
        self.board_label = tk.Label(self, text="–ë–æ—Ä–¥: ", font=("Courier", 14))
        self.board_label.pack(pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
        self.player_frames = []
        for player in simulator.players:
            frame = tk.Frame(self)
            frame.pack(pady=2)
            label = tk.Label(frame, text=f"{player.name}: —Å—Ç–µ–∫ {player.stack}", font=("Arial", 12))
            label.pack()
            self.player_frames.append((frame, label))

        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        self.log = tk.Text(self, height=12, width=60, font=("Courier", 10), bg="black", fg="white")
        self.log.pack(pady=10)
        self.log.insert(tk.END, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Poker Simulator!\n")

        # –ö–Ω–æ–ø–∫–∏
        self.start_button = tk.Button(self, text="–ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É", command=self.start_hand, bg="green", fg="white")
        self.start_button.pack(pady=2)

        self.next_button = tk.Button(self, text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–¥–∏—è", command=self.next_stage, state=tk.DISABLED)
        self.next_button.pack(pady=2)

    def update_board(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–æ—Ä–¥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç."""
        board_frame = tk.Frame(self)
        board_frame.place(x=100, y=100)

        for i, card in enumerate(self.simulator.community_cards):
            filename = f"{card.rank_str()}{card.suit}.png"
            path = os.path.join(self.cards_dir, filename)
            try:
                img = tk.PhotoImage(file=path)
                img = img.subsample(2)  # —É–º–µ–Ω—å—à–∞–µ–º –≤ 2 —Ä–∞–∑–∞
                label = tk.Label(board_frame, image=img)
                label.image = img  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                label.grid(row=0, column=i, padx=5, pady=5)
            except Exception as e:
                print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞: {path} ‚Äî {e}")

    def start_hand(self):
        """–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É."""
        self.log.delete(1.0, tk.END)
        self.simulator.start_hand()
        self.update_players()
        self.board_label.config(text="–ë–æ—Ä–¥: ")
        self.log.insert(tk.END, "üÉè –†–∞–∑–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n")
        self.start_button.config(state=tk.DISABLED)
        self.next_button.config(state=tk.NORMAL)

    def next_stage(self):
        result = self.simulator.next_stage()

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ä–¥
        board_str = " ".join(c.pretty() for c in self.simulator.community_cards)
        self.board_label.config(text=f"–ë–æ—Ä–¥: {board_str}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–∫–∏
        self.update_players()

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        stage = self.simulator.stages[self.simulator.current_stage - 1] if self.simulator.current_stage > 0 else ""

        if hasattr(self.simulator.logger, 'last_action') and self.simulator.logger.last_action == 'bluff_raise':
            self.log.insert(tk.END, f"[{stage}] üé≠ {self.simulator.logger.last_player} —Å–¥–µ–ª–∞–ª –ë–õ–ï–§-–†–ï–ô–ó!\n")

        if result.get("action") == "all_folded":
            self.log.insert(tk.END, f"[{stage}] üéâ –í—Å–µ —Å–±—Ä–æ—Å–∏–ª–∏! {result['winner']} –∑–∞–±–∏—Ä–∞–µ—Ç {result['pot']}\n")
            self.next_button.config(state=tk.DISABLED)
            self.start_button.config(state=tk.NORMAL)
        elif result.get("action") == "showdown":
            winners = result["winners"]
            if winners:
                split_pot = result["pot"] // len(winners)
                self.log.insert(tk.END,
                                f"[{stage}] üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å(–∏): {winners} ‚Üí +{split_pot} –∫–∞–∂–¥—ã–π\n")
            else:
                self.log.insert(tk.END, f"[{stage}] üèÜ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª (–±–∞–Ω–∫: {result['pot']})\n")
            self.next_button.config(state=tk.DISABLED)
            self.start_button.config(state=tk.NORMAL)
        else:
            self.log.insert(tk.END, f"[{stage}] üí∞ –ë–∞–Ω–∫: {self.simulator.pot}\n")

        self.log.see(tk.END)

    def update_players(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–µ–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤, –≤–∫–ª—é—á–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫—É –±–ª–µ—Ñ–∞ –∏ –∫–∞—Ä—Ç—ã."""
        for (frame, label), player in zip(self.player_frames, self.simulator.players):
            if not player.in_game:
                label.config(text=f"{player.name}: –≤—ã–±—ã–ª", fg="red", image=None, compound=tk.LEFT)
            else:
                hand_cards = player.hand
                card_images = []
                for card in hand_cards:
                    filename = f"{card.rank_str()}{card.suit}.png"
                    path = os.path.join(self.cards_dir, filename)
                    try:
                        img = tk.PhotoImage(file=path)
                        img = img.subsample(2)  # —É–º–µ–Ω—å—à–∞–µ–º –≤ 2 —Ä–∞–∑–∞
                        card_images.append(img)
                    except Exception as e:
                        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞: {path} ‚Äî {e}")
                        continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —É–¥–∞–ª–∏–ª–∏—Å—å
                player.card_images = card_images

                text = f"{player.name}: —Å—Ç–µ–∫ {player.stack}"
                if card_images:
                    label.config(image=card_images[0], compound=tk.LEFT, text=text)
                else:
                    label.config(text=text, image=None, compound=tk.LEFT)


if __name__ == "__main__":
    players = [
        Player("SimpleBot", simple_strategy),
        Player("MCCBot", monte_carlo_strategy),
        Player("PassiveBot", simple_strategy),
    ]
    sim = PokerSimulator(players, big_blind=20)
    app = PokerGUI(sim)
    app.mainloop()
