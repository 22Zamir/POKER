import os
import tkinter as tk
from tkinter import ttk
from poker.simulator import PokerSimulator, Player
from ai.basic_strategy import simple_strategy, monte_carlo_strategy


class PokerGUI(tk.Tk):
    def __init__(self, simulator):
        super().__init__()
        self.simulator = simulator
        self.title("üÉè Poker Simulator")
        self.geometry("1200x800")
        self.configure(bg="#0d3b2a")  # –¢—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω (–ø–æ–∫–µ—Ä–Ω—ã–π —Å—Ç–æ–ª)

        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–∞—Ä—Ç–∞–º–∏
        self.cards_dir = os.path.join(os.path.dirname(__file__), "..", "templates", "cards")
        if not os.path.exists(self.cards_dir):
            print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.cards_dir}")
            self.cards_dir = None

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(self, text="üÉè Poker Simulator", font=("Arial Black", 24), bg="#0d3b2a", fg="white")
        title.pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –±–æ—Ä–¥–∞
        board_frame = tk.Frame(self, bg="#0d3b2a")
        board_frame.pack(pady=10)

        # –ú–µ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –±–æ—Ä–¥–∞
        self.board_label = tk.Label(board_frame, text="–ë–æ—Ä–¥: ", font=("Arial", 16, "bold"), bg="#0d3b2a", fg="white")
        self.board_label.pack(side=tk.LEFT, padx=5)

        # –§—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ—Ä–¥–∞
        self.board_images_frame = tk.Frame(board_frame, bg="#0d3b2a")
        self.board_images_frame.pack(side=tk.LEFT, padx=5)

        # –§—Ä–µ–π–º –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
        players_frame = tk.Frame(self, bg="#0d3b2a")
        players_frame.pack(pady=20, fill=tk.X, padx=20)

        self.player_frames = []
        for i, player in enumerate(self.simulator.players):
            frame = tk.Frame(players_frame, bg="#1a523f", relief=tk.RAISED, bd=2)
            frame.pack(side=tk.LEFT, padx=15, pady=10, fill=tk.Y)

            # –ò–º—è –∏ —Å—Ç–µ–∫
            name_label = tk.Label(frame, text=f"{player.name}", font=("Arial", 14, "bold"), bg="#1a523f", fg="white")
            name_label.pack(pady=5)

            stack_label = tk.Label(frame, text=f"—Å—Ç–µ–∫: {player.stack}", font=("Arial", 12), bg="#1a523f", fg="#ffd700")
            stack_label.pack(pady=2)

            # –§—Ä–µ–π–º –¥–ª—è –∫–∞—Ä—Ç
            card_frame = tk.Frame(frame, bg="#1a523f")
            card_frame.pack(pady=5)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
            player.card_images = []

            self.player_frames.append((frame, name_label, stack_label, card_frame))

        # –õ–æ–≥
        log_frame = tk.Frame(self, bg="#0d3b2a")
        log_frame.pack(pady=10, fill=tk.BOTH, expand=True, padx=20)

        self.log = tk.Text(log_frame, height=8, width=100, font=("Courier", 11), bg="#000", fg="#fff", wrap=tk.WORD,
                           relief=tk.SUNKEN, bd=2)
        self.log.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.log.insert(tk.END, "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Poker Simulator!\n")

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(self, bg="#0d3b2a")
        btn_frame.pack(pady=10)

        self.start_button = tk.Button(btn_frame, text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É", command=self.start_hand, bg="#2ecc71",
                                      fg="white", font=("Arial", 12, "bold"), relief=tk.RAISED, bd=3)
        self.start_button.pack(side=tk.LEFT, padx=10)

        self.next_button = tk.Button(btn_frame, text="‚è© –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–¥–∏—è", command=self.next_stage, state=tk.DISABLED,
                                     bg="#3498db", fg="white", font=("Arial", 12, "bold"), relief=tk.RAISED, bd=3)
        self.next_button.pack(side=tk.LEFT, padx=10)

    def update_board(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ—Ä–¥–∞."""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç—ã
        for widget in self.board_images_frame.winfo_children():
            widget.destroy()

        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        if not self.simulator.community_cards:
            label = tk.Label(self.board_images_frame, text="–ë–æ—Ä–¥ –ø—É—Å—Ç", font=("Arial", 12), bg="#0d3b2a", fg="white")
            label.pack()
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É
        for i, card in enumerate(self.simulator.community_cards):
            filename = f"{card.rank_str()}{card.suit}.png"
            path = os.path.join(self.cards_dir, filename) if self.cards_dir else None

            try:
                if not self.cards_dir or not os.path.exists(path):
                    raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

                img = tk.PhotoImage(file=path)
                img = img.subsample(3)  # —É–º–µ–Ω—å—à–∞–µ–º

                # –°–æ–∑–¥–∞—ë–º —Ä–∞–º–∫—É —Å —Ç–µ–Ω—å—é
                card_container = tk.Frame(self.board_images_frame, bg="#0d3b2a", highlightbackground="#333",
                                          highlightthickness=2)
                card_container.pack(side=tk.LEFT, padx=5)

                label = tk.Label(card_container, image=img, bg="#0d3b2a")
                label.image = img
                label.pack()

            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É –±–æ—Ä–¥–∞: {path} ‚Äî {e}")
                label = tk.Label(self.board_images_frame, text=card.pretty(), font=("Arial", 14), bg="#0d3b2a",
                                 fg="white")
                label.pack(side=tk.LEFT, padx=5)

    def start_hand(self):
        """–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É."""
        self.log.delete(1.0, tk.END)
        self.simulator.start_hand()
        self.update_players()
        self.board_label.config(text="–ë–æ—Ä–¥: ")
        self.update_board()
        self.log.insert(tk.END, "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Poker Simulator!\n", ("stage",))
        self.log.insert(tk.END, "üÉè –†–∞–∑–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞—Å—å! –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–∫: 0\n", ("stage",))
        self.start_button.config(state=tk.DISABLED)
        self.next_button.config(state=tk.NORMAL)

    def next_stage(self):
        result = self.simulator.next_stage()
        if not result:
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–æ—Ä–¥–∞
        board_str = " ".join(c.pretty() for c in self.simulator.community_cards)
        self.board_label.config(text=f"–ë–æ—Ä–¥: {board_str}")

        # –û–±–Ω–æ–≤–ª—è–µ–º GUI –∏–≥—Ä–æ–∫–æ–≤ –∏ –±–æ—Ä–¥
        self.update_players()
        self.update_board()

        # üî• –ö—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!
        self.pretty_log(result)

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –±–ª–µ—Ñ–∞ (–µ—Å–ª–∏ –±—ã–ª)
        stage = self.simulator.stages[self.simulator.current_stage - 1] if self.simulator.current_stage > 0 else ""

        if hasattr(self.simulator.logger, 'last_action') and self.simulator.logger.last_action == 'bluff_raise':
            player = self.simulator.logger.last_player
            log_line = f"[{stage}] üé≠ {player} —Å–¥–µ–ª–∞–ª –ë–õ–ï–§-–†–ï–ô–ó!\n"
            self.log.insert(tk.END, log_line, ("action",))
            self.log.see(tk.END)

        # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if result.get("action") == "all_folded" or result.get("action") == "showdown":
            self.next_button.config(state=tk.DISABLED)
            self.start_button.config(state=tk.NORMAL)

    def update_players(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–µ–∫–∏ –∏ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤."""
        for (frame, name_label, stack_label, card_frame), player in zip(self.player_frames, self.simulator.players):
            if not player.in_game:
                name_label.config(text=f"{player.name} ‚ùå", fg="red")
                stack_label.config(text="–≤—ã–±—ã–ª", fg="red")
                # –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—ã
                for widget in card_frame.winfo_children():
                    widget.destroy()
                player.card_images = []
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–∫
                name_label.config(text=player.name, fg="white")
                stack_label.config(text=f"—Å—Ç–µ–∫: {player.stack}", fg="#ffd700")

                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç—ã
                for widget in card_frame.winfo_children():
                    widget.destroy()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã
                player.card_images = []
                for card in player.hand:
                    filename = f"{card.rank_str()}{card.suit}.png"
                    path = os.path.join(self.cards_dir, filename) if self.cards_dir else None

                    try:
                        if not self.cards_dir or not os.path.exists(path):
                            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

                        img = tk.PhotoImage(file=path)
                        img = img.subsample(3)  # —É–º–µ–Ω—å—à–∞–µ–º

                        # –†–∞–º–∫–∞ —Å —Ç–µ–Ω—å—é
                        card_container = tk.Frame(card_frame, bg="#1a523f", highlightbackground="#333",
                                                  highlightthickness=2)
                        card_container.pack(side=tk.LEFT, padx=3)

                        label_card = tk.Label(card_container, image=img, bg="#1a523f")
                        label_card.image = img
                        label_card.pack()

                        player.card_images.append(img)

                    except Exception as e:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞: {path} ‚Äî {e}")
                        label_card = tk.Label(card_frame, text=card.pretty(), font=("Arial", 12), bg="#1a523f",
                                              fg="white")
                        label_card.pack(side=tk.LEFT, padx=3)

    def pretty_log(self, result):
        """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥."""
        # –ë–µ—Ä—ë–º stage –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∞ –Ω–µ –∏–∑ current_stage
        stage = result.get('stage', 'Unknown')
        pot = result.get('pot', 0)
        action = result.get('action', 'continue')

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —ç—Ç–∞–ø–æ–≤
        stage_emoji = {
            'Preflop': 'üÉè',
            'Flop': 'üí•',
            'Turn': 'üåÄ',
            'River': 'üåä',
            'Showdown': 'üèÜ',
            'AllFolded': 'üéâ'
        }.get(stage, 'üé≤')

        # –¢–µ–≥–∏ —Ü–≤–µ—Ç–æ–≤
        self.log.tag_configure("stage", foreground="#ffd700", font=("Courier", 11, "bold"))
        self.log.tag_configure("bank", foreground="#00ff00", font=("Courier", 11))
        self.log.tag_configure("winner", foreground="#ffcc00", font=("Courier", 11, "bold"))

        log_line = f"[{stage_emoji} {stage}] "

        if action == "all_folded":
            winner = result.get("winner", "???")
            log_line += f"üéâ –í—Å–µ —Å–±—Ä–æ—Å–∏–ª–∏! {winner} –∑–∞–±–∏—Ä–∞–µ—Ç {pot}\n"
            self.log.insert(tk.END, log_line, ("winner",))

        elif action == "showdown":
            winners = result.get("winners", [])
            community_cards = result.get("community_cards", [])
            cards_str = " ".join(c.pretty() for c in community_cards) if community_cards else "‚Äî"

            log_line += f"üí∞ –ë–∞–Ω–∫: {pot} | –ë–æ—Ä–¥: {cards_str}"

            if not winners:
                log_line += " | üèÜ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª\n"
                self.log.insert(tk.END, log_line, ("bank",))
            else:
                split_pot = pot // len(winners)
                winners_str = ", ".join(winners)
                log_line += f" | üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å(–∏): {winners_str} ‚Üí +{split_pot}\n"
                self.log.insert(tk.END, log_line, ("winner",))

        else:
            # –û–±—ã—á–Ω—ã–π —Ö–æ–¥: Preflop, Flop, Turn, River
            community_cards = result.get('community_cards', [])
            cards_str = " ".join(c.pretty() for c in community_cards) if community_cards else "‚Äî"
            log_line += f"üí∞ –ë–∞–Ω–∫: {pot} | –ë–æ—Ä–¥: {cards_str}\n"
            self.log.insert(tk.END, log_line, ("bank",))

        self.log.see(tk.END)


if __name__ == "__main__":
    players = [
        Player("SimpleBot", simple_strategy),
        Player("MCCBot", monte_carlo_strategy),
        Player("PassiveBot", simple_strategy),
    ]
    sim = PokerSimulator(players, big_blind=20)
    app = PokerGUI(sim)
    app.mainloop()
