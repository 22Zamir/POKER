import tkinter as tk
from poker.simulator import PokerSimulator, Player
from ai.basic_strategy import simple_strategy, monte_carlo_strategy


class PokerGUI(tk.Tk):
    def __init__(self, simulator):
        super().__init__()
        self.simulator = simulator
        self.title("Poker Simulator")

        # –ú–µ—Ç–∫–∞ –¥–ª—è –±–æ—Ä–¥–∞
        self.board_label = tk.Label(self, text="–ë–æ—Ä–¥: ", font=("Courier", 14))
        self.board_label.pack(pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
        self.player_frames = []
        for player in simulator.players:
            frame = tk.Frame(self)
            frame.pack(pady=2)
            label = tk.Label(frame, text=f"{player.name}: —Å—Ç–µ–∫ {player.stack}", font=("Arial", 12))
            label.pack()
            self.player_frames.append((frame, label))

        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        self.log = tk.Text(self, height=12, width=60, font=("Courier", 10), bg="black", fg="white")
        self.log.pack(pady=10)
        self.log.insert(tk.END, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Poker Simulator!\n")

        # –ö–Ω–æ–ø–∫–∏
        self.start_button = tk.Button(self, text="–ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É", command=self.start_hand, bg="green", fg="white")
        self.start_button.pack(pady=2)

        self.next_button = tk.Button(self, text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–¥–∏—è", command=self.next_stage, state=tk.DISABLED)
        self.next_button.pack(pady=2)

    def start_hand(self):
        """–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É."""
        self.log.delete(1.0, tk.END)
        self.simulator.start_hand()  # –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å, —Ä–∞–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç—ã
        self.update_players()
        self.board_label.config(text="–ë–æ—Ä–¥: ")
        self.log.insert(tk.END, "üÉè –†–∞–∑–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n")
        self.start_button.config(state=tk.DISABLED)
        self.next_button.config(state=tk.NORMAL)

    def next_stage(self):
        result = self.simulator.next_stage()

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ä–¥
        board_str = " ".join(c.pretty() for c in self.simulator.community_cards)
        self.board_label.config(text=f"–ë–æ—Ä–¥: {board_str}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–∫–∏
        self.update_players()

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        stage = self.simulator.stages[self.simulator.current_stage - 1] if self.simulator.current_stage > 0 else ""
        if result.get("action") == "all_folded":
            self.log.insert(tk.END, f"[{stage}] –í—Å–µ —Å–±—Ä–æ—Å–∏–ª–∏, {result['winner']} –∑–∞–±—Ä–∞–ª {result['pot']}\n")
            self.next_button.config(state=tk.DISABLED)  # –û—Ç–∫–ª—é—á–∞–µ–º "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–¥–∏—è"
            self.start_button.config(state=tk.NORMAL)  # –í–∫–ª—é—á–∞–µ–º "–ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É"

        elif result.get("action") == "showdown":
            winners = result["winners"]
            if winners:
                split_pot = result["pot"] // len(winners)
                self.log.insert(tk.END,
                                f"[{stage}] –ü–æ–±–µ–¥–∏—Ç–µ–ª—å(–∏): {winners} –ø–æ–ª—É—á–∏–ª–∏ {split_pot} –∫–∞–∂–¥—ã–π\n")
            else:
                self.log.insert(tk.END, f"[{stage}] –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª (–±–∞–Ω–∫: {result['pot']})\n")
            self.next_button.config(state=tk.DISABLED)  # –û—Ç–∫–ª—é—á–∞–µ–º "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–¥–∏—è"
            self.start_button.config(state=tk.NORMAL)  # –í–∫–ª—é—á–∞–µ–º "–ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É"

        else:
            self.log.insert(tk.END, f"[{stage}] –ë–∞–Ω–∫: {self.simulator.pot}\n")

        # –ê–≤—Ç–æ-–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ª–æ–≥–∞
        self.log.see(tk.END)

    def update_players(self):
        for (frame, label), player in zip(self.player_frames, self.simulator.players):
            if player.in_game:
                label.config(text=f"{player.name}: —Å—Ç–µ–∫ {player.stack}", fg="black")  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç
            else:
                label.config(text=f"{player.name}: –≤—ã–±—ã–ª", fg="red")


if __name__ == "__main__":
    players = [
        Player("SimpleBot", simple_strategy),
        Player("MCCBot", monte_carlo_strategy),  # –ó–∞–º–µ–Ω–∏ –Ω–∞ monte_carlo_strategy, –∫–æ–≥–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç
        Player("PassiveBot", simple_strategy),
    ]
    sim = PokerSimulator(players, big_blind=20)
    app = PokerGUI(sim)
    app.mainloop()
